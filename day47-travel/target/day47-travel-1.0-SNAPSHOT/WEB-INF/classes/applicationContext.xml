<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--======================spring整合redis========================-->
    <!--1. 创建redis的独立配置类  配置redis的ip地址与端口-->
    <bean id="standaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <!--连接redis的主机名（ip地址）-->
        <property name="hostName" value="localhost"/>
        <!--redis使用的端口-->
        <property name="port" value="6379"/>
    </bean>
    <!--2. 创建jedis连接工厂-->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg ref="standaloneConfiguration"/>
    </bean>
    <!--3. 创建RedisTemplate对象  由于我们常用的数据类型是string类型，而值部分我们有时候是需要存储
    一个java对象，所以这里配置序列化器
        比如：
            redisTenmplate.set(字符串，java对象);  这里只能存储字符串
    -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <!--配置连接工厂-->
        <property name="connectionFactory" ref="connectionFactory"/>

        <!--配置序列化器-->
        <!--配置键的序列化器-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--配置值的序列化器-->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
    </bean>
     <!--1， 处理dao层-->
     <!--1.1 加载配置文件-->
     <context:property-placeholder location="classpath:jdbc.properties"/>
     <!--1.2 配置数据源对象,创建连接池  -->
     <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
         <!--连接字符串 -->
         <property name="url" value="${jdbc.url}"/>
         <!--用户名-->
         <property name="username" value="${jdbc.username}"/>
         <!--密码-->
         <property name="password" value="${jdbc.password}"/>
         <!--驱动名字-->
         <property name="driverClassName" value="${jdbc.driver}"/>
     </bean>
    <!-- 1.3 扫描dao包 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.heima.travel.dao"/>
    </bean>
     <!-- 1.4 创建SqlSessionFactoryBean，该类的作用就是创建接口的代理对象 -->
     <bean class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource"/>
         <property name="typeAliasesPackage" value="com.heima.travel.domain"/>
         <property name="configLocation" value="classpath:mybatis-config.xml"/>
     </bean>

    <!--2. 负责service层   事务管理-->
    <!-- 2.1扫描业务类 -->
    <context:component-scan base-package="com.heima.travel.service"/>
     <!-- 2.2创建事务管理器 -->
     <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
         <property name="dataSource" ref="dataSource"/>
     </bean>
     <!--2.3 配置事务的通知规则：哪些需要有事务，哪些不需要有事务； 注解式事务 -->
    <tx:advice transaction-manager="transactionManager" id="ad">
        <tx:attributes>
            <!--   name:方法名，propagation:事务的传播行为 SUPPORTS（可有可无），REQUIRED（必须有事务）     -->
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!--2.4 配置切面 -->
    <aop:config>
        <!--配置切入点表达式 =  [权限修饰符]  方法的返回值类型  包名.类名.方法名(形参列表) [异常]-->
        <aop:pointcut id="pt" expression="execution(* com.heima.travel.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="ad" pointcut-ref="pt"/>
    </aop:config>

</beans>