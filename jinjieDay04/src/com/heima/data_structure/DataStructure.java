package com.heima.data_structure;

public class DataStructure {
    //数据结构的总结：
    /**
     * 1.栈，先进后出，后进先出，（瓶子）
     * 2，队列，先进先出，后进后出
     * 3，数组，内存连续区域，查询索引快，查询内容也慢。增删更慢
     * 4，链表，数据是游离的，查询也慢，因为是特工的单向操作，首尾增删极快；
     * 5，二叉树：永远只有一个根节点，每个子节点不超过2个节点
     * 注：以下树都是二叉树
     * 6，查找二叉树（有规律的二叉树）：小的元素放树的左边，大的放右边，即小左大右
     * 7，平衡查找二叉树：让树的高度差不超过1，为了避免查找二叉树一边过长，变成链表，也会影响查询效率
     * 8，红黑树：就是基于红黑规则实现了自平衡的排序二叉树
     *
     */
    /**数组
     * 查询速度快：查询数据通过地址值和索引定位，查询任意数据耗时相同。（元素在内存中是连续存储的）
     *删除效率低：要将原始数据删除，同时后面每个数据前移。
     */
    /**链表
     * 链表中的元素是游离存储的，每个元素节点包含数据值和下一个元素的地址。
     *链表查询慢。无论查询哪个数据都要从头开始找
     * 链表增删相对快
     *
     */
    /**
     * 栈和队列 是 模拟结构，内存中并不真实存在，栈只是在处理函数的时候用到它的思想
     *
     * 数组，链表，红黑树等是内存中真实存在的结构
     */

    public static void main(String[] args) {
        System.out.println(Math.pow(1.2,10));
    }
}
